#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>


struct node;
typedef struct node* Position;

struct node
{
	int element;
	Position next;
};

int GetRandom(int min, int max);
int Push(Position P, int x, int br_ele);

int main()
{
	struct node S;
	int odabir = 0;
	int br_ele = 0;
	int max = 0;
	srand(time(NULL));

	S.next = NULL;
	S.element = NULL;

	while (max < 5)
	{
		printf("Unesite velicinu stoga: ");
		scanf("%d", &max);
		if (max < 5 || max > 20)
		{
			max = 0;
			printf("Pogresan unos! \n");
		}

	}

	S.next = NULL;

	do
	{
		printf("\r\n\t\t********************");
		printf("\r\n\t\t***   IZBORNIK   ***");
		printf("\r\n\t\t********************");
		printf("\r\n");
		printf("\r\n\t\t1.\tPush na stog");
		printf("\r\n\t\t2.\tPop sa stoga");
		printf("\r\n\t\t3.\tIspis");
		printf("\r\n\t\t4.\tIzlaz iz programa");
		printf("\r\n\r\nVas odabir : ");


		scanf(" %d", &odabir);
		
		if (odabir == 1)
		{
			if (br_ele < max)
			{
				br_ele = Push(&S, GetRandom(0, 100), br_ele);
			}
			else
			{
				printf("Stog je popunjen!\n");
				Print(S.next, br_ele);
			}
			
		}
		if (odabir == 2)
		{
			if (br_ele > 0)
			{
				br_ele = Pop(&S, br_ele);
			}
			Print(S.next, br_ele);
		}
		if (odabir == 3)
		{
			Print(S.next, br_ele);
		}
	} while (odabir != 4);



	system("pause");
	return 0;
}

int GetRandom(int min, int max)
{
	int x = 0;
	x = rand() % (max - min) + min;
	return x;
}

int Push(Position P, int x, int br_ele)
{
	Position q;
	static Position zadnji;

	q = (Position)malloc(sizeof(struct node));
	
	if (q == NULL)
	{
		printf("Greska pri alokaciji memorije!!!\n");
		free(q);
		return -1;
	}
	else if (q)
	{
		if (P->next == NULL)
		{
			zadnji = q;
		}

		q->element = x;
		
		printf("Sprema se %d.\n", x);
		q->next = P->next;
		P->next = q;

		zadnji->next = q;
		br_ele++;

	}
	return br_ele;
}
int Pop(Position P, int br_ele)
{
	Position temp;
	static Position zadnji;

	if (P->next != NULL)
	{
		temp = P->next;

		printf("Skida se element %d.\n", temp->element);

		P->next = temp->next;

		if (zadnji == NULL && br_ele > 1)
		{
			while (P->next != temp)
				P = P->next;
			zadnji = P;
		}
		zadnji->next = temp->next;

		free(temp);
		br_ele--;

		if (br_ele == 0)
			zadnji = NULL;
	}
	else
	{
		printf("\r\nLista je prazna.");
	}
	return br_ele;
}

int Print(Position P, int br_ele)
{
	while (br_ele > 0)
	{
		printf(" %d ", P->element);
		P = P->next;
		br_ele--;
	}

	return 0;
}
